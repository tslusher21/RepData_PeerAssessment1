str(split(x,list(f1,f2),drop=TRUE))
lm(y~x)
traceback()
?eval
debug(lm)
lm(y~x)
n
clear()
?rm
rm(list=ls(all=TRUE))
library(datasets)
data(iris)
?iris
irirs
iris
head(iris,)
sapply(iris,iris["Species"])
?sapply
split(iris,iris["Species"])
sapply(split(iris,iris["Species"]),mean)
sapply(split(iris["Sepal.Length"],iris["Species"]),mean)
split(iris,iris["Species"])
sapply(split(iris,iris["Species"]),fucntion(x) colMeans(x["Sepal.Length"]))
sapply(split(iris,iris["Species"]),fucntion(x) colMeans(x[,"Sepal.Length"]))
sapply(split(iris,iris["Species"]),function(x) colMeans(x[,"Sepal.Length"]))
lapply(split(iris,iris["Species"]),function(x) colMeans(x[,"Sepal.Length"]))
lapply(split(iris,iris["Species"]),function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
sapply(split(iris,iris["Species"]),function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
sapply(split(iris,iris["Species"]),function(x) colMeans(x[,c("Sepal.Length")]))
sapply(split(iris,iris["Species"]),function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
colMeans(iris)
colMeans(iris[,])
colMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
mtcars
sapply(split(mtcars,mtcars["cyl"]),function(x) mean(x["mpg"]))
x["mpg"]
mtcars["mpg"]
mtcars["mpg",]
mtcars[,"mpg"]
sapply(split(mtcars,mtcars["cyl"]),function(x) mean(x[,"mpg"]))
sapply(split(mtcars["mpg"],mtcars["cyl"]),mean)
?tapply
tapply(mtcars["cyl"],mtcars["mpg"],mean)
mtcars["cyl"]
mtcars["mpg"]
length(mtcars["cyl"])
length(mtcars["mpg"])
split(mtcars,mtcars$cyl)
apply(mtcars,2,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars["mpg"],mtcars["cyl"]),mean)
mtcars["mpg"]
mtcars$mpg
tapply(mtcars$cyl,mtcars$mean,mean)
mtcars$cyl
mtcars$mpg
tapply(mtcars$cyl,mtcars$mpg,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
debug(ls)
ls()
getwd()
ppois
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
jsonData$owner$repos_url
jsonData$owner$type
jsonData$owner$login
names(jsonData$owner)
myjson<-toJSON(iris,pretty=TRUE)
cat(myjson)
iris2<-fromJSON(myjson)
head(iris2)
install.packages(“RMySQL”, type = “source”)
install.packages(RMySQL, type = “source”)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL",type="source")
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databses;"); dbDisconnect(ucscDb);
result<-dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
head(result)
hg19<-dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQury(hg19,"select count(*) from affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
head(affyData)
View(affyData)
View(affyData)
View(affyData)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A=matrix(1:10,nr=5,nc=2)
h5write(A,"exmaple.h5","foo/A")
h5write(A,"example.h5","foo/A")
B=array(seq(0,1,2,0,by=0.1),dim=c(5,2,2))
B=array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale")<-"liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readA
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url<="http://scholar.google.com/citations?user=HI-I6C0AAAA&hl=en"
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAA&hl=en"
html<-htmlTreeParseurl,useInternalNodes=1)
html<-htmlTreeParse(url,useInternalNodes=1)
xpathSApply(html,"//title",xmlValue)
html
html[[1]
]
html[[1]]
html[1]
html[[1]][[1]]
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
xpathSApply(parsedHtml, "//td[@id='col-citedby']", xmlValue)
xpathSApply(parsedHtml,"//td",xmlValue)
names(parsedHtml)
?html
?xml
?XML
?xpathSApply
parsedHtml
names(parsedHtml)
?xmlTreeParse
xmlTreeParse(parsedHtml)
?htmlTreeParse
?xmlTreeParse
library(swirl)
swirl()
View(top_counts)
play()
pack_sum
top_counts <- filter(cran,size>679)
top_counts
View(top_counts)
info()
top_counts <- filter(by_package,size>679)
by_package
top_counts <- filter(by_package,mean(size)>679)
cran<-tbl_df(mydf)
rm("mydf")
cran
by_package<-group_by(cran,package)
by_package
pack_sum
top_counts<-filter(pack_sum,count>679)
nxt()
play()
View(top_counts)
nxt()
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
submit()
students3
submit()
?spread
submit()
play()
res<-gather(students3,class,grade,class1:class5,na.rm=TRUE)
res
spread(res,c("name","class","grade"),test)
spread(res,name,test)
spread(res,name,class,grade,test)
spread(res,name,class,grade,-test)
spread(res,test)
spread(res,exam,test)
spread(res,test,exam)
spread(res,-test,test)
spread(res,class,grade)
spread(res,grade,test)
spread(res,class,test)
spread(res,grade,class)
spread(res,name,test)
spread(res,name,class,test)
spread(res,name,class,grade,test)
spread(res,c(name,class,grade),test)
spread(res,grade,test,class)
spread(res,grade,class,test)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
spread(df,x,y)
spread(res,test,grade)
nxt()
submit()
extract_numeric("class5")
play()
?mutate
mutate(spread(test,grade),class=extract_numeric(class))
mutate(spread(res,test,grade),class=extract_numeric(class))
res
res<-gather(students3,class,grade,class1:class5,na.rm=TRUE)
res
mutate(spread(res,test,grade),class=extract_numeric(class))
nxt()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
play()
select(sat,-contains("total"))
gather(select(sat,-contains("total")),part_sex,count,-score_range)
?separate
separate(gather(select(sat,-contains("total")),part_sex,count,-score_range),part_sex,c("part","sex"))
nxt()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment,hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive<- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long<-new_interval(arrive,last_time)
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
quit()
library(reshape2)
head(mtcars)
mtcars$carname<-rownames(mtcars)
head(mtcars)
carMelt<-melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(carMelt)
head(carMelt[order(carMelt$carname)])
head(carMelt[order(carMelt$carname),])
cylData<-dcast(carMelt,cyl~variable)
cylData<-dcast(carMelt,cyl ~ variable)
cylData
cylData<-dcast(carMelt,cyl ~ variable,mean)
cylData
head(InsectSprays)
InsectSprays$spray
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns <- split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount <- lapply(spIns,sum)
sprCount
head(InsectSpray)
head(InsectSprays)
?xyplot
library(lattice)
?xyplot
library(nmle)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
?text
?axis
?lines
?lpoints
p<-xyplot(weight ~ Time | Diet, BodyWeight)
p
?splom
?par
?print.trellis
?par
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?qplot
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
?aes
g <- ggplot(movies, aes(votes, rating))
print(g)
?"ggplot"
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)+geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
setwd("E:\\Data_Science_Specialization\\Reproducible_Research\\Course Project 1\\RepData_PeerAssessment1")
getwd
getwd()
dir
dir()
?unzip
unzip("activity.zip")
data<-read.csv("activity.csv")
View(data)
data$date<-as.Date(data$date)
View(data)
library(ggplot2)
?aggregate
dailySteps <- aggregate(data$steps,by=data$date,FUN=sum,na.rm=TRUE)
dailySteps <- aggregate(data$steps,by=list(data$date),FUN=sum,na.rm=TRUE)
View(dailySteps)
names(dailySteps) <- c("date","steps")
?qqplot
qqplot(data$date,data$steps)
?"ggplot2"
?ggplot
?ggplot2
?ggplot
qqplot(data$steps)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=5)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=6)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=7)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=8)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=10)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=12)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=14)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=8)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col=blue)
?hist
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col=blue1)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col=lightblue)
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col="blue")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col="lightblue")
myPlot <- hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col="lightblue")
png("dailysteps.png")
myPlot
dev.off()
myPlot
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col="lightblue")
png("dailysteps.png")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col="lightblue")
dev.off()
rm(myPlot)
meanSteps<-mean(dailYSteps$steps)
meanSteps<-mean(dailySteps$steps)
medSteps <- median(dailySteps$steps)
medSteps
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=8,col="lightblue")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col="lightblue")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=8,col="lightblue")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=16,col="lightblue")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=8,col="lightblue")
png("dailysteps.png")
hist(dailySteps$steps,main="Steps per Day",xlab="Steps",breaks=8,col="lightblue")
dev.off()
mean_interv_steps <- aggregate(data$steps,by=list(data$interval),FUN=mean,na.rm=TRUE)
View(mean_interv_steps)
names(mean_interv_steps) <- c("interval","meanSteps")
?plot
plot(mean_interv_steps$interval,mean_interv_steps$meanSteps,type="l")
plot(mean_interv_steps$interval,mean_interv_steps$meanSteps,type="l",main="Mean Steps Taken per 5-minute Interval",xlab="Interval",ylab="Mean Steps Taken")
png("mean_interv_steps.png")
plot(mean_interv_steps$interval,mean_interv_steps$meanSteps,type="l",main="Mean Steps Taken per 5-minute Interval",xlab="Interval",ylab="Mean Steps Taken")
dev.off()
maxInterval <- mean_interv_steps$interval[which.max(mean_interv_steps$meanSteps)]
?nrow
numMissingSteps <- nrow(data[is.na(data$steps),])
nrow(data[is.na(data$date),])
names(data)
nrow(data[is.na(data$interval),])
?merge
dataImputed <- merge(x=data,y=mean_interv_steps,by="interval",all.x=TRUE)
View(dataImputed)
dataImputed$steps[is.na(dataImputed$steps)] <- dataImputed$meanSteps[is.na(dataImputed$meanSteps)]
dataImputed$steps[is.na(dataImputed$steps)] <- dataImputed$meanSteps[is.na(dataImputed$steps)]
dailyStepsImputed <- aggregate(dataImputed$steps,by=list(dataImputed$date),FUN=sum,na.rm=TRUE)
View(dailyStpesImputed)
View(dailyStepsImputed)
names(dailyStepsImputed) <- c("date","steps")
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",breaks=8,col="lightblue")
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue")
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=4)
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=5)
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=6)
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=7)
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=8)
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=12)
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=16)
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",col="lightblue",breaks=8)
png("dailystepsImputed.png")
hist(dailyStepsImputed$steps,main="Steps per Day",xlab="Steps",breaks=8,col="lightblue")
dev.off()
meanStepsImputed <- mean(dailyStepsImputed$steps)
medStepsImputed <- median(dailyStepsImputed$steps)
?weekdays()
dailyStepsImputed$weekday <- as.factor(ifelse(weekdays(dailyStepsImputed$date) %in% c("Saturday","Sunday"), "Weekend", "Weekday"))
dailyStepsImputed$weekday <- as.factor(ifelse(weekdays(dailyStepsImputed$date) %in% c("Saturday","Sunday"), "weekend", "weekday"))
mean_interv_wd_steps <- aggregate(dataImputed$steps,by=list(dataImputed$date,dataImputed$weekday),FUN=mean,na.rm=TRUE)
mean_interv_wd_steps <- aggregate(dataImputed$steps,by=list(dataImputed$interval,dataImputed$weekday),FUN=mean,na.rm=TRUE)
mean_interv_wd_steps <- aggregate(dataImputed$steps,by=c(dataImputed$interval,dataImputed$weekday),FUN=mean,na.rm=TRUE)
dataImputed$weekday <- as.factor(ifelse(weekdays(dailyStepsImputed$date) %in% c("Saturday","Sunday"), "weekend", "weekday"))
mean_interv_wd_steps <- aggregate(dataImputed$steps,by=list(dataImputed$interval,dataImputed$weekday),FUN=mean,na.rm=TRUE)
View(mean_interv_wd_steps)
names(mean_interv_wd_steps) <- c("interval","weekday","meanSteps")
?xyplot
??xyplot
library(lattice)
?xyplot
xyplot(meanSteps~interval | weekday, data = mean_interv_wd_steps, type = 'l', xlab = 'Interval', ylab = 'Number of steps')
?xyplot
xyplot(meanSteps~interval | weekday, data = mean_interv_wd_steps, type = 'l', xlab = 'Interval', ylab = 'Number of steps', layout = c(1,2))
png("mean_interv_wd_steps.png")
xyplot(meanSteps~interval | weekday, data = mean_interv_wd_steps, type = 'l', xlab = 'Interval', ylab = 'Number of steps', layout = c(1,2))
dev.off()
?knit2html
library(knitr)
?knit2html
knit2html("PA1_template.Rmd","PA1_template.md")
knit2html("PA1_template.Rmd")
quit()
